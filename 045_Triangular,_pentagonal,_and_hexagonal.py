'''Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	T(n) = n(n+1)/2	 	  1, 3, 6 , 10, 15, ...
Pentagonal	 	P(n) = n(3n−1)/2	  1, 5, 12, 22, 35, ...
Hexagonal	 	H(n) = n(2n−1)	 	  1, 6, 15, 28, 45, ...
It can be verified that T(285) = P(165) = H(143) = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
Link: https://projecteuler.net/problem=45'''

#Imports
import time

#Build a Triangle function
def Pent(n):
    return (n * ((3 * n) - 1)) // 2
   
    
#Build an isHexagonal function
#Note: This is derived using the quadratic formula
def isHex(n):
    ans = (1 + (1 + (8 * n))**0.5) / 4
    return ans == int(ans)

#Build a solve function
def solve():
    #Define variables
    s           = time.time()
    i, notFound = 165, True
    
    while notFound:
        i += 1
        #We increment by pentagonal numbers because they have the largest
        #growth rate, and will therefore get us to the answer as fast as possible.
        num = Pent(i)
        #I only check if the number is a hexagonal number because we already
        #know it's pentagonal, and we also know that by default, all hexagonal
        #numbers are also triangonal numbers.
        if isHex(num):
            notFound = False
    
    #Print the results
    print('The next triangle number after 40755 that is also ')
    print('pentagonal and hexagonal is ' + str(num) + '.')
    print('This took ' + str(time.time() - start) + ' seconds to calculate.')

#Run the program
solve()

'''
The Quadratic Equation is X = (-b +- sqrt(b^2 - 4ac)) / 2a, where a, b, and c are derived from the original equation 
when converted into the form: ax^2 + bx + c = 0. To figure out what the 'is Hexagonal' function needs to be, we do the following:

n(2n−1) = x
2n^2 - n = x
2n^2 - n - x = 0

Therefore,

a = 2
b = -1
c = -x

Plugging these values into the quadratic equation, we get:

X = (-b +- sqrt(b^2 - 4ac)) / 2a

X = (-(-1) +- sqrt((-1)^2 - 4(2)(-x))) / 2(2)

X = (1 +- sqrt(1 + 8x)) / 4

And since we only need the positive values of this equation, we end up with:

def isHex(n):
    ans = (1 + (1 + 8 * n)**0.5) / 4
    return ans == int(ans)
'''
