'''The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
Link: https://projecteuler.net/problem=12'''

#Imports
import time
from math import prod

#Build a function that finds the triangle
#number for n natural numbers
def tri(num):
    return num * (num + 1) / 2
 
#Build a factors function
def factors(n):
    facts = []
    for i in range(2, 4):
        if n % i == 0: facts.append([i, 0])
        while n % i == 0:
            facts[-1][1] += 1
            n /= i
    for i in range(5, int(n**0.5) + 1, 6):
        plus2 = [i, i + 2]
        for j in plus2:
            if n % j == 0: facts.append([j, 0])
            while n % j == 0:
                facts[-1][1] += 1
                n /= j
    if n > 2: facts.append([int(n), 1])
    return facts
    
#Build a function that returns the amount
#of divisors a given input has
def tau(n):
    f = factors(n)
    return prod(i[1] + 1 for i in f)

#Build a function that solves the problem
def solve(num):
    #Define variables
    start = time.time()
    i = 1
    
    #Solve the problem
    while tau(tri(i)) <= num:
        i += 1
      
    ans = str(int(tri(i)))
    n = str(num)
    
    #Print the results
    print('The value of the first triangle number ')
    print('to have over ' + n + ' divisors is ' + ans + '.')
    print('This took ' + str(time.time() - start) + ' seconds to calculate.')
    
#Find the greatest product of four adjacent numbers in the same direction in the grid
num = 500
solve(num)
