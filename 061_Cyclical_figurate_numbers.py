'''Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal) 
numbers and are generated by the following formulae:

Triangle      P3,n = n(n+1)/2     1, 3, 6, 10, 15, ...
Square        P4,n = n^2          1, 4, 9, 16, 25, ...
Pentagonal    P5,n = n(3n−1)/2    1, 5, 12, 22, 35, ...
Hexagonal     P6,n = n(2n−1)      1, 6, 15, 28, 45, ...
Heptagonal    P7,n = n(5n−3)/2    1, 7, 18, 34, 55, ...
Octagonal     P8,n = n(3n−2)      1, 8, 21, 40, 65, ...
The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

The set is cyclic, in that the last two digits of each number is the first two digits of the next number 
(including the last number with the first).
Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), 
is represented by a different number in the set.
This is the only set of 4-digit numbers with this property.
Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: 
triangle, square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
Link: https://projecteuler.net/problem=61'''

#Imports
import time

#Build a triangle function
def triangle(n):
    return (n * (n + 1)) / 2

#Build a square function
def square(n):
    return n**2

#Build a pentagonal function
def pentagonal(n):
    return n * ((3 * n) - 1) / 2

#Build a hexagonal function
def hexagonal(n):
    return n * ((2 * n) - 1)

#Build a heptagonal function
def heptagonal(n):
    return n * ((5 * n) - 2) / 2

#Build an octagonal function
def octagonal(n):
    return n * ((3 * n) - 2)

#Build a last2first2 function
def last2first2(num1, num2):
    return str(num1)[2:4] == str(num2)[0:2]

#Build a fill numbers function
def fillNums(func):
    holder = []
    i = 1
    while func(i) < 10000:
        if func(i) > 999:
            holder.append(func(i))
        i += 1
    return holder

#Build a findAns function
def program(combos):
    for i in combos:
        for a in i[0]:
            for b in i[1]:
                if not last2first2(a,b):
                    continue
                for c in i[2]:
                    if not last2first2(b, c):
                        continue
                    for d in i[3]:
                        if not last2first2(c, d):
                            continue
                        for e in i[4]:
                            if not last2first2(d, e):
                                continue
                            for f in i[5]:
                                if not last2first2(e, f) or not last2first2(f, a):
                                    continue
                                else:
                                    return a + b + c + d + e + f

#Build a solve function
def solve():
    #Define variables
    start = time.time()
    functions = [triangle, square, pentagonal, hexagonal, heptagonal, octagonal]
    nums = []
    for i in functions:
        nums.append(fillNums(i))

    allcombos = list(it.permutations(nums, 6))

    #Solve the problem
    ans = findAns(allcombos)

    #Print the results
    string = ''
    for i in range(1, 6):
        string += str(ans[i]) + ' + '
    string += str(ans[6])
    print 'The sum of ' + string + ','
    print 'which is the only ordered set of six cyclic '
    print '4-digit numbers for which each polygonal type: '
    print 'triangle, square, pentagonal, hexagonal, heptagonal, '
    print 'and octagonal, is represented by a different number '
    print 'in the set, is ' + str(ans[0]) + '.'
    print 'This took ' + str(time.time() - start) + ' seconds to calculate.'

#Run the program
solve()
